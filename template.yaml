AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample rust application for Lambda

Parameters:
  Test:
    Type: String
  AwsS3Bucket:
    Type: String
  ConsumerKey:
    Type: String
  ConsumerSecret:
    Type: String
  BearerToken:
    Type: String
  AccessToken:
    Type: String
  AccessTokenSecret:
    Type: String

Resources:
  ProjectS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AwsS3Bucket

  # HelloRustFunctionImage:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: HelloRustImage
  #     #Runtime: provided # Amazon Linux
  #     Role: arn:aws:iam::428694349470:role/role-lambdaexec
  #     MemorySize: 512
      
    # イメージの場合
  #     PackageType: Image
  #     ImageConfig:
  #        Command:
  #            - "app.lambda_handler"
  #   Metadata:
  #     Dockerfile: Dockerfile
  #     DockerContext: ./stock_data
  #     DockerTag: v1
  
  # StockRustFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: StockRust
  #     #Runtime: provided # Amazon Linux
  #     Role: arn:aws:iam::428694349470:role/role-lambdaexec
  #     MemorySize: 512
  #     CodeUri: ./stock_data
  #     PackageType: Image
  #     ImageConfig:
  #        Command:
  #            - "app.lambda_handler"
  #     Environment: 
  #       Variables:
  #         AWS_S3_BUCKET: !Ref AWS_S3_BUCKET
  #     Events:
  #       CWSchedule:
  #         Type: Schedule
  #         Properties:
  #           Schedule: 'cron(0 15 * * ? *)'
  #           Name: GetStockChartDailySchedule
  #           Description: get daily stockchart schedule
  #           #Input: !Sub '{"ticker": "$NIKK"}'
  #           Input:
  #             !Sub |
  #               {
  #                   "ticker": "$NIKK"
  #               }
  #           Enabled: false # accident prevention

  # Zipの場合
  HelloRustFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HelloRust
      #Runtime: provided # Amazon Linux
      Role: arn:aws:iam::428694349470:role/role-lambdaexec
      MemorySize: 512
      CodeUri: ./stock_data
      #CodeUri: .
      PackageType: Zip
      Runtime: provided.al2 # Amazon Linux 2
      Handler: bootstrap.is.real.handler
    Metadata:
      BuildMethod: makefile

  StockRustFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: StockRust
      #Runtime: provided # Amazon Linux
      Role: arn:aws:iam::428694349470:role/role-lambdaexec
      MemorySize: 512
      CodeUri: ./stock_data
      #CodeUri: .
      PackageType: Zip
      Runtime: provided.al2 # Amazon Linux 2
      Handler: bootstrap.is.real.handler
      Environment:
          Variables:
            # TEST: TEST
            # AWS_S3_BUCKET: AWS_S3_BUCKET
            TEST: !Ref Test
            AWS_S3_BUCKET: !Ref AwsS3Bucket
            CONSUMER_KEY: !Ref ConsumerKey
            CONSUMER_SECRET: !Ref ConsumerSecret
            BEARER_TOKEN: !Ref BearerToken
            ACCESS_TOKEN: !Ref AccessToken
            ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 15 ? * MON-FRI *)'
            Name: GetStockChartDailySchedule
            Description: get daily stockchart schedule
            #Input: !Sub '{"ticker": "$NIKK"}'
            Input:
              !Sub |
                {
                    "ticker": "$NIKK"
                }
            Enabled: True
    Metadata:
      BuildMethod: makefile

  TweetRustFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TweetRust
      #Runtime: provided # Amazon Linux
      Role: arn:aws:iam::428694349470:role/role-lambdaexec
      MemorySize: 512
      CodeUri: ./stock_data
      #CodeUri: .
      PackageType: Zip
      Runtime: provided.al2 # Amazon Linux 2
      Handler: bootstrap.is.real.handler
      Environment:
          Variables:
            # TEST: TEST
            # AWS_S3_BUCKET: AWS_S3_BUCKET
            TEST: !Ref Test
            AWS_S3_BUCKET: !Ref AwsS3Bucket
            CONSUMER_KEY: !Ref ConsumerKey
            CONSUMER_SECRET: !Ref ConsumerSecret
            BEARER_TOKEN: !Ref BearerToken
            ACCESS_TOKEN: !Ref AccessToken
            ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
      Events:
        S3exampleEvent:
          Type: S3
          Properties:
            Bucket: !Ref ProjectS3Bucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value: stock_data/%24NIKK/
    Metadata:
      BuildMethod: makefile